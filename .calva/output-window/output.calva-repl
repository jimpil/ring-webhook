; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: (cd /home/dimitris/vscode/ring-webhook; lein update-in :dependencies conj '[nrepl,"1.1.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.47.1"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:39943 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉ring-webhook.core꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉ring-webhook.core꞉> 
; Jack-in done.
clj꞉ring-webhook.core꞉> 
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: (cd /home/dimitris/vscode/ring-webhook; lein update-in :dependencies conj '[nrepl,"1.1.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.47.1"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +dev repl :headless)
; nREPL Connection was closed
; Using host:port 127.0.0.1:41899 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉ring-webhook.core꞉> 
; Jack-in done.
clj꞉ring-webhook.core꞉> 
; Syntax error (ClassNotFoundException) compiling at (src/ring_webhook/core.clj:139:22).
; clojure.data.json
clj꞉ring-webhook.core꞉> 
nil
clj꞉ring-webhook.core꞉> 
; Execution error (IllegalArgumentException) at ring-webhook.core/eval10886 (form-init1696832807707989567.clj:143).
; No matching field found: toEpochSeconds for class java.time.Instant
clj꞉ring-webhook.core꞉> 
; Execution error (IllegalArgumentException) at ring-webhook.core/eval10891 (form-init1696832807707989567.clj:143).
; No matching field found: epochSeconds for class java.time.Instant
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716144594", :foo true, :bar false},
 :signature "oVVlJBBDseheCfKGj7mdix2ZIkhboT9vvZ8BMtfQE14"}
clj꞉ring-webhook.core꞉> 
(meta *1)
{:token
 "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOiIxNzE2MTQ0NTk0IiwiZm9vIjp0cnVlLCJiYXIiOmZhbHNlfQ.oVVlJBBDseheCfKGj7mdix2ZIkhboT9vvZ8BMtfQE14"}
clj꞉ring-webhook.core꞉> 
(clojure.data.json/write-str {:foo 1})
"{\"foo\":1}"
clj꞉ring-webhook.core꞉> 
; Evaluating file: core.clj
nil
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716145119", :foo true, :bar false},
 :signature "JDLke_M6GUekNX9ANlrL643A8d4hLW1WN6YvRTotnqI"}
clj꞉ring-webhook.core꞉> 
(-> (java.time.Instant/now) .getEpochSecond str)
"1716145157"
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716145157", :foo true, :bar false},
 :signature "zzmsTxVh0tzhw4yfgek_iR3q_t5g2b4ZJHPpgQhozsQ"}
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716145157", :foo true, :bar false},
 :signature "zzmsTxVh0tzhw4yfgek_iR3q_t5g2b4ZJHPpgQhozsQ"}
clj꞉ring-webhook.core꞉> 
; Evaluating file: core.clj
nil
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716145157", :foo true, :bar false, :jti "31c68a4f-c6eb-44fd-a6e3-21be5a7c0e7a"},
 :signature "WOpTvKlXzqJfifIRRuFW4Nq9W-gUv9Q2cVkSqC42MpI"}
clj꞉ring-webhook.core꞉> 
; Evaluating file: core.clj
nil
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716145157", :foo true, :bar false},
 :signature "zzmsTxVh0tzhw4yfgek_iR3q_t5g2b4ZJHPpgQhozsQ"}
clj꞉ring-webhook.core꞉> 
; Evaluating file: core.clj
nil
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716145157", :foo true, :bar false},
 :signature "zzmsTxVh0tzhw4yfgek_iR3q_t5g2b4ZJHPpgQhozsQ"}
clj꞉ring-webhook.core꞉> 
#'ring-webhook.core/sign-jwt
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716145157", :foo true, :bar false},
 :signature "zzmsTxVh0tzhw4yfgek_iR3q_t5g2b4ZJHPpgQhozsQ"}
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716145157", :foo true, :bar false},
 :signature "zzmsTxVh0tzhw4yfgek_iR3q_t5g2b4ZJHPpgQhozsQ"}
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716145157", :foo true, :bar false},
 :signature "zzmsTxVh0tzhw4yfgek_iR3q_t5g2b4ZJHPpgQhozsQ"}
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:iat "1716145157", :foo true, :bar false},
 :signature "zzmsTxVh0tzhw4yfgek_iR3q_t5g2b4ZJHPpgQhozsQ"}
clj꞉ring-webhook.core꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: (cd /home/dimitris/vscode/ring-webhook; lein update-in :dependencies conj '[nrepl,"1.1.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.47.1"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +dev repl :headless)
; Using host:port 127.0.0.1:35669 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉ring-webhook.core꞉> 
; Jack-in done.
clj꞉ring-webhook.core꞉> 
nil
clj꞉ring-webhook.core꞉> 
#'ring-webhook.core/sign-jwt
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"},
 :claims {:sub "0123456789", :name "John Doe", :admin true},
 :signature "gg_w9ssoEoEZq7DusIKnZRfRF8XmeTA8Imc3MLd9vNo"}
clj꞉ring-webhook.core꞉> 
(meta *1)
{:token
 "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIwMTIzNDU2Nzg5IiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.gg_w9ssoEoEZq7DusIKnZRfRF8XmeTA8Imc3MLd9vNo"}
clj꞉ring-webhook.core꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: (cd /home/dimitris/vscode/ring-webhook; lein update-in :dependencies conj '[nrepl,"1.1.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.47.1"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +dev repl :headless)
; Using host:port 127.0.0.1:46035 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉ring-webhook.core꞉> 
; Jack-in done.
clj꞉ring-webhook.core꞉> 
nil
clj꞉ring-webhook.core꞉> 
#'ring-webhook.core/sign-jwt
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"}, :claims {:admin true}, :signature "Y1tgchRu_jj5lqSnhnrg9L9n4UiH5E-xyus7V2N0MjQ"}
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"}, :claims {:admin "true"}, :signature "Iij90xrTb-X69PgA9mwgZARYVp1nPOhmZVpKwK8POeg"}
clj꞉ring-webhook.core꞉> 
(meta *1)
; Execution error (ArityException) at ring-webhook.core/eval10651 (form-init9038856407558903099.clj:198).
; Wrong number of args (0) passed to: clojure.core/meta--5483
clj꞉ring-webhook.core꞉> 
{:token "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbiI6InRydWUifQ.Iij90xrTb-X69PgA9mwgZARYVp1nPOhmZVpKwK8POeg"}
clj꞉ring-webhook.core꞉> 
(clojure.data.json/write-str {:admin "true"})
"{\"admin\":\"true\"}"
clj꞉ring-webhook.core꞉> 
#'ring-webhook.core/sign-jwt
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"}, :claims {:admin true}, :signature "oRvT0gzL1pGPzXUJDDfuS5ViCXu12CEoe6MykK1fkMc"}
clj꞉ring-webhook.core꞉> 
(count "Key-Must-Be-at-least-32-bytes-in-length!")
40
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"}, :claims {:admin true}, :signature "oRvT0gzL1pGPzXUJDDfuS5ViCXu12CEoe6MykK1fkMc"}
clj꞉ring-webhook.core꞉> 
(meta *1)
{:token "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbiI6dHJ1ZX0.oRvT0gzL1pGPzXUJDDfuS5ViCXu12CEoe6MykK1fkMc"}
clj꞉ring-webhook.core꞉> 
#'ring-webhook.core/sign-jwt
clj꞉ring-webhook.core꞉> 
{:header {:typ "JWT", :alg "HS256"}, :claims {:admin true}, :signature "oRvT0gzL1pGPzXUJDDfuS5ViCXu12CEoe6MykK1fkMc"}
clj꞉ring-webhook.core꞉> 
{:token "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhZG1pbiI6dHJ1ZX0.oRvT0gzL1pGPzXUJDDfuS5ViCXu12CEoe6MykK1fkMc"}
clj꞉ring-webhook.core꞉> 
